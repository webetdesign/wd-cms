// Utility generator
// Used to generate utilities & print utilities

$enable-caret: true;
$enable-rounded: true;
$enable-shadows: false;
$enable-gradients: false;
$enable-transitions: true;
$enable-reduced-motion: true;
$enable-smooth-scroll: true;
$enable-grid-classes: true;
$enable-cssgrid: false;
$enable-button-pointers: true;
$enable-rfs: true;
$enable-validation-icons: true;
$enable-negative-margins: false;
$enable-deprecation-messages: true;
$enable-important-utilities: false;

$spacer: 1rem;
$spacers: (
        0: 0,
        1: $spacer * .25,
        2: $spacer * .5,
        3: $spacer,
        4: $spacer * 1.5,
        5: $spacer * 3,
);

$utilities : () !default;
// stylelint-disable-next-line scss/dollar-variable-default
$utilities : map-merge(
    (
        "margin": (
                property: margin,
                class: m,
                values: map-merge($spacers, (auto: auto))
        ),
        "margin-x": (
                property: margin-right margin-left,
                class: mx,
                values: map-merge($spacers, (auto: auto))
        ),
        "margin-y": (
                property: margin-top margin-bottom,
                class: my,
                values: map-merge($spacers, (auto: auto))
        ),
        "margin-top": (
                property: margin-top,
                class: mt,
                values: map-merge($spacers, (auto: auto))
        ),
        "margin-end": (
                property: margin-right,
                class: me,
                values: map-merge($spacers, (auto: auto))
        ),
        "margin-bottom": (
                property: margin-bottom,
                class: mb,
                values: map-merge($spacers, (auto: auto))
        ),
        "margin-start": (
                property: margin-left,
                class: ms,
                values: map-merge($spacers, (auto: auto))
        ),
        "padding": (
                property: padding,
                class: p,
                values: $spacers
        ),
        "padding-x": (
                property: padding-right padding-left,
                class: px,
                values: $spacers
        ),
        "padding-y": (
                property: padding-top padding-bottom,
                class: py,
                values: $spacers
        ),
        "padding-top": (
                property: padding-top,
                class: pt,
                values: $spacers
        ),
        "padding-end": (
                property: padding-right,
                class: pe,
                values: $spacers
        ),
        "padding-bottom": (
                property: padding-bottom,
                class: pb,
                values: $spacers
        ),
        "padding-start": (
                property: padding-left,
                class: ps,
                values: $spacers
        )
    ),
    $utilities
);

@mixin generate-utility($utility, $infix, $is-rfs-media-query: false) {
    $values : map-get($utility, values);

    // If the values are a list or string, convert it into a map
    @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
        $values : zip($values, $values);
    }

    @each $key, $value in $values {
        $properties              : map-get($utility, property);

        // Multiple properties are possible, for example with vertical or horizontal margins or paddings
        @if type-of($properties) == "string" {
            $properties : append((), $properties);
        }

        // Use custom class if present
        $property-class          : if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));
        $property-class          : if($property-class == null, "", $property-class);

        // Use custom CSS variable name if present, otherwise default to `class`
        $css-variable-name       : if(map-has-key($utility, css-variable-name), map-get($utility, css-variable-name), map-get($utility, class));

        // State params to generate pseudo-classes
        $state                   : if(map-has-key($utility, state), map-get($utility, state), ());

        $infix                   : if($property-class == "" and str-slice($infix, 1, 1) == "-", str-slice($infix, 2), $infix);

        // Don't prefix if value key is null (e.g. with shadow class)
        $property-class-modifier : if($key, if($property-class == "" and $infix == "", "", "-") + $key, "");

        @if map-get($utility, rfs) {
            // Inside the media query
            @if $is-rfs-media-query {
                $val   : rfs-value($value);

                // Do not render anything if fluid and non fluid values are the same
                $value : if($val == rfs-fluid-value($value), null, $val);
            } @else {
                $value : rfs-fluid-value($value);
            }
        }

        $is-css-var              : map-get($utility, css-var);
        $is-local-vars           : map-get($utility, local-vars);
        $is-rtl                  : map-get($utility, rtl);

        @if $value != null {
            @if $is-rtl == false {
                /* rtl:begin:remove */
            }

            @if $is-css-var {
                .#{$property-class + $infix + $property-class-modifier} {
                    --#{$prefix}#{$css-variable-name}: #{$value};
                }

                @each $pseudo in $state {
                    .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
                        --#{$prefix}#{$css-variable-name}: #{$value};
                    }
                }
            } @else {
                .#{$property-class + $infix + $property-class-modifier} {
                    @each $property in $properties {
                        @if $is-local-vars {
                            @each $local-var, $variable in $is-local-vars {
                                --#{$prefix}#{$local-var}: #{$variable};
                            }
                        }
                        #{$property}: $value if($enable-important-utilities, !important, null);
                    }
                }

                @each $pseudo in $state {
                    .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
                        @each $property in $properties {
                            @if $is-local-vars {
                                @each $local-var, $variable in $is-local-vars {
                                    --#{$prefix}#{$local-var}: #{$variable};
                                }
                            }
                            #{$property}: $value if($enable-important-utilities, !important, null);
                        }
                    }
                }
            }

            @if $is-rtl == false {
                /* rtl:end:remove */
            }
        }
    }
}

$infix: '';

@each $key, $utility in $utilities {
    // The utility can be disabled with `false`, thus check if the utility is a map first
    // Only proceed if responsive media queries are enabled or if it's the base media query
    @if type-of($utility) == "map" and (map-get($utility, responsive) or $infix == "") {
        @include generate-utility($utility, $infix);
    }
}

